service: codepipelinemonitoring
frameworkVersion: '3'

env:
  TARGET: dev

provider:
  name: aws
  stage: dev  # Get the stage from the environment variable TARGET
  region: ap-south-1  # Use AWS_REGION from the environment variables
  runtime: python3.12
  timeout: 900
  environment:
    TARGET_CLUSTER: my-company
    # Uncomment if using SSM variable
    # MONITORING_BUCKET: ${ssm:/vodasure/${env:TARGET}/s3/monitoring_bucket/name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        # - ssm:*
        - logs:*
        # - ssmmessages:*
        # - ec2messages:*
        - cloudwatch:*
        # - s3:*
        - lambda:*
        # - synthetics:*
      Resource: 
        - "*"

tags:
  Name: my-monitoring
  Project: Mycompany
  # Uncomment and fill in if necessary:
  # ManagedBy: vfsinsurancedevops@vodacom.co.za
  # SecurityZone: D1
  # Confidentiality: C3
  # TaggingVersion: v2.0
  # BusinessService: VODASURE:APPL:ZA:DEV

functions:
  codepipelineMonitoring:
    handler: handler.hello
    events:
      - eventBridge:
          pattern:
            source:
              - "aws.codepipeline"
            detail-type:
              - "CodePipeline Pipeline Execution State Change"
          target:
            arn: arn:aws:lambda:ap-south-1:248189941331:function:codepipelineMonitoring
            # Uncomment and use if you want to filter by state or status
            # detail:
            #   state:
            #     - "STOPPED"
            #   test-run-status:
            #     - "PASSED"
            #     - "FAILED"

resources:
  Resources:
    MyEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: my-event-bus

        
# Uncomment and use this if you need SSM fetching for monitoring bucket
# custom:
#   serverlessSsmFetch:
#     MONITORING_BUCKET: /vodasure/${env:TARGET}/s3/monitoring_bucket/name

# Uncomment for additional synthetics functions if needed
# functions:
#   syntheticsDTAnalysis:
#     handler: trigger.run
#     events:
#       - s3:
#           bucket: ${ssm:/vodasure/${env:TARGET}/s3/monitoring_bucket/name}
#           existing: true
#           event: s3:ObjectCreated:*
#           rules:
#             - prefix: synthetics
